import pysam
import sys
import os
import argparse

parser = argparse.ArgumentParser(description="Copy tags from a reference BAM to alignments in one or more BAM files")
parser.add_argument("infiles", type=str, nargs="+", help="Input BAM files or directories containing BAM files")
parser.add_argument("-r", "--raw", required=True, help="Raw BAM file generated by Dorado containing tags")
parser.add_argument("-e", "--ext", default=".bam", help="File extension for BAMs inside directories")
parser.add_argument("-o", "--outdir", default=None, help="Optional output directory for modified BAM files")
parser.add_argument("--outfile", default=None, help="Optional single output file (only valid for one input file)")

def copy_tags_from_reference(fname_in, ref_idx, fname_out):
    tags_to_copy = ['mv', 'qs', 'du', 'ns', 'ts', 'mx', 'ch', 'st', 'rn', 'fn', 'sm', 'sd', 'pi', 'sv', 'dx', 'RG', 'MM', 'ML']
    target_bam = pysam.AlignmentFile(fname_in, "rb")
    output_bam = pysam.AlignmentFile(fname_out, "wb", template=target_bam)

    for target_read in target_bam.fetch(until_eof=True):
        try:
            matches = list(ref_idx.find(target_read.query_name))
        except KeyError:
            matches = []

        if matches:
            ref_read = matches[0]
            for tag in tags_to_copy:
                try:
                    value = ref_read.get_tag(tag)
                    target_read.set_tag(tag, value)
                except KeyError:
                    continue
        output_bam.write(target_read)

    target_bam.close()
    output_bam.close()

def main(args):
    if args.outdir:
        if not os.path.isdir(args.outdir):
            os.mkdir(args.outdir)

    ref_bam = pysam.AlignmentFile(args.raw, "rb", check_sq=False)
    ref_idx = pysam.IndexedReads(ref_bam, multiple_iterators=True)
    ref_idx.build()

    input_files = []
    for path in args.infiles:
        if os.path.isdir(path):
            files = [os.path.join(path, fname) for fname in os.listdir(path) if fname.endswith(args.ext)]
        else:
            files = [path]
        input_files.extend(files)

    if args.outfile:
        if len(input_files) != 1:
            print("Error: --outfile can only be used when processing a single input file.")
            sys.exit(1)
        copy_tags_from_reference(input_files[0], ref_idx, args.outfile)
    else:
        for in_path in input_files:
            if args.outdir:
                out_path = os.path.join(args.outdir, os.path.basename(in_path))
            else:
                # Write to same folder as input file with ".tagged.bam"
                base, ext = os.path.splitext(in_path)
                out_path = base + "_tagged.bam"
            copy_tags_from_reference(in_path, ref_idx, out_path)

    ref_bam.close()

if __name__ == "__main__":
    args = parser.parse_args()
    main(args)
